pipeline {
    agent {
        kubernetes {
            yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          namespace: jenkins
        spec:
          containers:
          - name: docker
            image: docker
            command:
            - cat
            tty: true
            volumeMounts:
            - mountPath: /var/run/docker.sock
              name: docker-path
          volumes:
          - name: docker-path
            hostPath:
              path: /var/run/docker.sock
        '''
            workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: 'jenkins-pvc', readOnly: false)
        }
    }
    stages {
        stage('Package project stage') {
            steps {
                echo '----print all env variable----'
                sh 'env'
                echo '----print all custom params----'
                script {
                    for (param in params) {
                        echo "${param.key} -->  ${param.value}"
                    }
                }
                git 'https://github.com/zgbjty/my-spring-cloud-blog.git'
                withMaven(
                        options: [(junitPublisher(disabled: true)),
                                  findbugsPublisher(disabled: true),
                                  openTasksPublisher(disabled: true),
                                  dependenciesFingerprintPublisher(disabled: true),
                                  concordionPublisher(disabled: true),
                                  invokerPublisher(disabled: true),
                                  jgivenPublisher(disabled: true),
                                  jacocoPublisher(disabled: true),
                                  mavenLinkerPublisher(disabled: true),
                                  pipelineGraphPublisher(disabled: true)],
                        maven: 'maven3',
                        mavenLocalRepo: '$JENKINS_AGENT_WORKDIR/.m2/repository',
                        mavenSettingsConfig: 'd8292f9d-502a-47f2-b3d9-9d253090d09d'
                ) {
                    // sh 'mvn -B -f ./blog-service/pom.xml clean install -DskipTests=true -Dmaven.repo.local=$JENKINS_AGENT_WORKDIR/.m2/repository'
                    sh "mvn -B -f ./blog-service/pom.xml clean package -DskipTests=true -Dspring.profiles.active=${params.Profile}"
                }
            }
        }
        stage('Image build stage') {
            steps {
                script {
                    container('docker') {
                        echo '当前构建环境'
                        sh 'pwd'
                        sh 'env'
                        myImage = docker.build("konchoo1995/blog-service:${env.BUILD_ID}","-f blog-service/docker/Dockerfile blog-service/target")
                    }
                }
            }
        }
        stage('Image push stage') {
            steps {
                script {
                    container('docker') {
                        docker.withRegister('https://registry.hub.docker.com', 'docker-credentials') {
                            myImage.push()
                            myImage.push("latest")
                        }
                    }
                }
            }
        }
    }
}